{"version":3,"file":"tf-automl.esm.js","sources":["../src/util.ts","../src/img_classification.ts","../src/object_detection.ts","../src/version.ts","../src/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {browser, Tensor, Tensor3D, util} from '@tensorflow/tfjs-core';\nimport {ImageInput} from './types';\n\nexport function imageToTensor(img: ImageInput): Tensor3D {\n  return img instanceof Tensor ? img : browser.fromPixels(img);\n}\n\n/** Loads and parses the dictionary. */\nexport async function loadDictionary(modelUrl: string): Promise<string[]> {\n  const lastIndexOfSlash = modelUrl.lastIndexOf('/');\n  const prefixUrl =\n      lastIndexOfSlash >= 0 ? modelUrl.slice(0, lastIndexOfSlash + 1) : '';\n  const dictUrl = `${prefixUrl}dict.txt`;\n  const response = await util.fetch(dictUrl);\n  const text = await response.text();\n  return text.trim().split('\\n');\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GraphModel, loadGraphModel} from '@tensorflow/tfjs-converter';\nimport {image, Tensor, Tensor3D, tidy} from '@tensorflow/tfjs-core';\nimport {ImageInput} from './types';\nimport {imageToTensor, loadDictionary} from './util';\n\nexport interface ImagePrediction {\n  prob: number;\n  label: string;\n}\n\nexport interface ImageClassificationOptions {\n  centerCrop: boolean;\n}\n\n/** Input size as expected by the model. */\nconst IMG_SIZE: [number, number] = [224, 224];\n// Constants used to normalize the image between -1 and 1.\nconst DIV_FACTOR = 127.5;\nconst SUB_FACTOR = 1;\n\nexport class ImageClassificationModel {\n  constructor(public graphModel: GraphModel, public dictionary: string[]) {}\n\n  async classify(input: ImageInput, options?: ImageClassificationOptions):\n      Promise<ImagePrediction[]> {\n    options = sanitizeOptions(options);\n\n    const scores = tidy(() => {\n      const preprocessedImg = this.preprocess(input, options);\n      return this.graphModel.predict(preprocessedImg) as Tensor;\n    });\n    const probabilities = await scores.data() as Float32Array;\n    scores.dispose();\n    const result = Array.from(probabilities)\n                       .map((prob, i) => ({label: this.dictionary[i], prob}));\n    return result;\n  }\n\n  private preprocess(input: ImageInput, options: ImageClassificationOptions) {\n    // Preprocessing involves center crop and normalizing between [-1, 1].\n    const img = imageToTensor(input);\n    const croppedImg = options.centerCrop ?\n        centerCropAndResize(img) :\n        image.resizeBilinear(img, IMG_SIZE).expandDims();\n    return croppedImg.div(DIV_FACTOR).sub(SUB_FACTOR);\n  }\n}\n\nexport async function loadImageClassification(modelUrl: string):\n    Promise<ImageClassificationModel> {\n  const [model, dict] =\n      await Promise.all([loadGraphModel(modelUrl), loadDictionary(modelUrl)]);\n  return new ImageClassificationModel(model, dict);\n}\n\nfunction sanitizeOptions(options: ImageClassificationOptions) {\n  options = options || {} as ImageClassificationOptions;\n  if (options.centerCrop == null) {\n    options.centerCrop = true;\n  }\n  return options;\n}\n\n/** Center crops an image */\nfunction centerCropAndResize(img: Tensor3D) {\n  return tidy(() => {\n    const [height, width] = img.shape.slice(0, 2);\n    let top = 0;\n    let left = 0;\n    if (height > width) {\n      top = (height - width) / 2;\n    } else {\n      left = (width - height) / 2;\n    }\n    const size = Math.min(width, height);\n    const boxes = [\n      [top / height, left / width, (top + size) / height, (left + size) / width]\n    ];\n    const boxIndices = [0];\n    return image.cropAndResize(\n        img.toFloat().expandDims(), boxes, boxIndices, IMG_SIZE);\n  });\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GraphModel, loadGraphModel} from '@tensorflow/tfjs-converter';\nimport {dispose, image, Tensor, Tensor2D, tidy} from '@tensorflow/tfjs-core';\n\nimport {ImageInput} from './types';\nimport {imageToTensor, loadDictionary} from './util';\n\nconst DEFAULT_TOPK = 20;\nconst DEFAULT_IOU_THRESHOLD = 0.5;\nconst DEFAULT_SCORE_THRESHOLD = 0.5;\n\nconst INPUT_NODE_NAME = 'ToFloat';\nconst OUTPUT_NODE_NAMES =\n    ['Postprocessor/convert_scores', 'Postprocessor/Decode/transpose_1'];\n\nexport interface ObjectDetectionOptions {\n  /**\n   * Only the `topk` most likely objects are returned. The actual number of\n   * objects might be less than this number.\n   */\n  topk?: number;\n  /**\n   * Intersection over union threshold. IoU is a metric between 0 and 1 used to\n   * measure the overlap of two boxes. The predicted boxes will not overlap more\n   * than the specified threshold.\n   */\n  iou?: number;\n  /** Boxes with score lower than this threshold will be ignored. */\n  score?: number;\n}\n\n/** Contains the coordinates of a bounding box. */\nexport interface Box {\n  /** Number of pixels from the top of the image (top padding). */\n  top: number;\n  /** Number of pixels from the left of the image (left padding). */\n  left: number;\n  /** The width of the box. */\n  width: number;\n  /** The height of the box. */\n  height: number;\n}\n\n/** The predicted object, which holds the score, label and bounding box. */\nexport interface PredictedObject {\n  box: Box;\n  score: number;\n  label: string;\n}\n\nexport class ObjectDetectionModel {\n  constructor(public graphModel: GraphModel, public dictionary: string[]) {}\n\n  async detect(input: ImageInput, options?: ObjectDetectionOptions):\n      Promise<PredictedObject[]> {\n    options = sanitizeOptions(options);\n    const img = tidy(() => this.preprocess(input, options));\n    const [height, width] = [img.shape[1], img.shape[2]];\n    const feedDict: {[name: string]: Tensor} = {};\n    feedDict[INPUT_NODE_NAME] = img;\n    const [scoresTensor, boxesTensor] =\n        await this.graphModel.executeAsync(feedDict, OUTPUT_NODE_NAMES) as\n        Tensor[];\n\n    const [, numBoxes, numClasses] = scoresTensor.shape;\n    const [scores, boxes] =\n        await Promise.all([scoresTensor.data(), boxesTensor.data()]);\n    const {boxScores, boxLabels} =\n        calculateMostLikelyLabels(scores as Float32Array, numBoxes, numClasses);\n\n    // Sort the boxes by score, ignoring overlapping boxes.\n    const selectedBoxesTensor = await image.nonMaxSuppressionAsync(\n        boxesTensor as Tensor2D, boxScores, options.topk, options.iou,\n        options.score);\n    const selectedBoxes = await selectedBoxesTensor.data() as Int32Array;\n    dispose([img, scoresTensor, boxesTensor, selectedBoxesTensor]);\n\n    const result = buildDetectedObjects(\n        width, height, boxes as Float32Array, boxScores, boxLabels,\n        selectedBoxes, this.dictionary);\n    return result;\n  }\n\n  private preprocess(input: ImageInput, options: ObjectDetectionOptions) {\n    return imageToTensor(input).expandDims().toFloat();\n  }\n}\n\nexport async function loadObjectDetection(modelUrl: string):\n    Promise<ObjectDetectionModel> {\n  const [model, dict] =\n      await Promise.all([loadGraphModel(modelUrl), loadDictionary(modelUrl)]);\n  return new ObjectDetectionModel(model, dict);\n}\n\nfunction sanitizeOptions(options: ObjectDetectionOptions) {\n  options = options || {} as ObjectDetectionOptions;\n  if (options.topk == null) {\n    options.topk = DEFAULT_TOPK;\n  }\n  if (options.iou == null) {\n    options.iou = DEFAULT_IOU_THRESHOLD;\n  }\n  if (options.score == null) {\n    options.score = DEFAULT_SCORE_THRESHOLD;\n  }\n  return options;\n}\n\nfunction calculateMostLikelyLabels(\n    scores: Float32Array, numBoxes: number,\n    numClasses: number): {boxScores: number[], boxLabels: number[]} {\n  // Holds a score for each box.\n  const boxScores: number[] = [];\n  // Holds the label id for each box.\n  const boxLabels: number[] = [];\n  for (let i = 0; i < numBoxes; i++) {\n    let maxScore = Number.MIN_VALUE;\n    let mostLikelyLabel = -1;\n    for (let j = 0; j < numClasses; j++) {\n      const flatIndex = i * numClasses + j;\n      const score = scores[flatIndex];\n      if (score > maxScore) {\n        maxScore = scores[flatIndex];\n        mostLikelyLabel = j;\n      }\n    }\n    boxScores[i] = maxScore;\n    boxLabels[i] = mostLikelyLabel;\n  }\n  return {boxScores, boxLabels};\n}\n\nfunction buildDetectedObjects(\n    width: number, height: number, boxes: Float32Array, boxScores: number[],\n    boxLabels: number[], selectedBoxes: Int32Array,\n    dictionary: string[]): PredictedObject[] {\n  const objects: PredictedObject[] = [];\n  // Each 2d rectangle is fully described with 4 coordinates.\n  const numBoxCoords = 4;\n  for (let i = 0; i < selectedBoxes.length; i++) {\n    const boxIndex = selectedBoxes[i];\n    const [top, left, bottom, right] = Array.from(boxes.slice(\n        boxIndex * numBoxCoords, boxIndex * numBoxCoords + numBoxCoords));\n    objects.push({\n      box: {\n        left: left * width,\n        top: top * height,\n        width: (right - left) * width,\n        height: (bottom - top) * height,\n      },\n      label: dictionary[boxLabels[boxIndex]],\n      score: boxScores[boxIndex],\n    });\n  }\n  return objects;\n}\n","/** @license See the LICENSE file. */\n\n// This code is auto-generated, do not modify this file!\nconst version = '1.0.0';\nexport {version};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// Image classification API.\nexport {ImageClassificationModel, ImageClassificationOptions, ImagePrediction, loadImageClassification} from './img_classification';\n// Object detection API.\nexport {Box, loadObjectDetection, ObjectDetectionModel, ObjectDetectionOptions, PredictedObject} from './object_detection';\n\n// Shared API.\nexport {ImageInput} from './types';\nexport {version} from './version';\n"],"names":["sanitizeOptions"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;SAoBgB,aAAa,CAAC,GAAe;IAC3C,OAAO,GAAG,YAAY,MAAM,GAAG,GAAG,GAAG,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;CAC9D;;AAGD,SAAsB,cAAc,CAAC,QAAgB;;;;;;oBAC7C,gBAAgB,GAAG,QAAQ,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;oBAC7C,SAAS,GACX,gBAAgB,IAAI,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,gBAAgB,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC;oBACnE,OAAO,GAAM,SAAS,aAAU,CAAC;oBACtB,qBAAM,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,EAAA;;oBAApC,QAAQ,GAAG,SAAyB;oBAC7B,qBAAM,QAAQ,CAAC,IAAI,EAAE,EAAA;;oBAA5B,IAAI,GAAG,SAAqB;oBAClC,sBAAO,IAAI,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,EAAC;;;;CAChC;;ACjCD;;;;;;;;;;;;;;;;AA+BA;AACA,IAAM,QAAQ,GAAqB,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;;AAE9C,IAAM,UAAU,GAAG,KAAK,CAAC;AACzB,IAAM,UAAU,GAAG,CAAC,CAAC;AAErB;IACE,kCAAmB,UAAsB,EAAS,UAAoB;QAAnD,eAAU,GAAV,UAAU,CAAY;QAAS,eAAU,GAAV,UAAU,CAAU;KAAI;IAEpE,2CAAQ,GAAd,UAAe,KAAiB,EAAE,OAAoC;;;;;;;wBAEpE,OAAO,GAAG,eAAe,CAAC,OAAO,CAAC,CAAC;wBAE7B,MAAM,GAAG,IAAI,CAAC;4BAClB,IAAM,eAAe,GAAG,KAAI,CAAC,UAAU,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;4BACxD,OAAO,KAAI,CAAC,UAAU,CAAC,OAAO,CAAC,eAAe,CAAW,CAAC;yBAC3D,CAAC,CAAC;wBACmB,qBAAM,MAAM,CAAC,IAAI,EAAE,EAAA;;wBAAnC,aAAa,GAAG,SAAmC;wBACzD,MAAM,CAAC,OAAO,EAAE,CAAC;wBACX,MAAM,GAAG,KAAK,CAAC,IAAI,CAAC,aAAa,CAAC;6BACpB,GAAG,CAAC,UAAC,IAAI,EAAE,CAAC,IAAK,QAAC,EAAC,KAAK,EAAE,KAAI,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,IAAI,MAAA,EAAC,IAAC,CAAC,CAAC;wBAC1E,sBAAO,MAAM,EAAC;;;;KACf;IAEO,6CAAU,GAAlB,UAAmB,KAAiB,EAAE,OAAmC;;QAEvE,IAAM,GAAG,GAAG,aAAa,CAAC,KAAK,CAAC,CAAC;QACjC,IAAM,UAAU,GAAG,OAAO,CAAC,UAAU;YACjC,mBAAmB,CAAC,GAAG,CAAC;YACxB,KAAK,CAAC,cAAc,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC,UAAU,EAAE,CAAC;QACrD,OAAO,UAAU,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;KACnD;IACH,+BAAC;CAAA,IAAA;SAEqB,uBAAuB,CAAC,QAAgB;;;;;wBAGxD,qBAAM,OAAO,CAAC,GAAG,CAAC,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAE,cAAc,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAA;;oBADrE,KACF,SAAuE,EADpE,KAAK,QAAA,EAAE,IAAI,QAAA;oBAElB,sBAAO,IAAI,wBAAwB,CAAC,KAAK,EAAE,IAAI,CAAC,EAAC;;;;CAClD;AAED,SAAS,eAAe,CAAC,OAAmC;IAC1D,OAAO,GAAG,OAAO,IAAI,EAAgC,CAAC;IACtD,IAAI,OAAO,CAAC,UAAU,IAAI,IAAI,EAAE;QAC9B,OAAO,CAAC,UAAU,GAAG,IAAI,CAAC;KAC3B;IACD,OAAO,OAAO,CAAC;CAChB;;AAGD,SAAS,mBAAmB,CAAC,GAAa;IACxC,OAAO,IAAI,CAAC;QACJ,IAAA,0BAAuC,EAAtC,cAAM,EAAE,aAA8B,CAAC;QAC9C,IAAI,GAAG,GAAG,CAAC,CAAC;QACZ,IAAI,IAAI,GAAG,CAAC,CAAC;QACb,IAAI,MAAM,GAAG,KAAK,EAAE;YAClB,GAAG,GAAG,CAAC,MAAM,GAAG,KAAK,IAAI,CAAC,CAAC;SAC5B;aAAM;YACL,IAAI,GAAG,CAAC,KAAK,GAAG,MAAM,IAAI,CAAC,CAAC;SAC7B;QACD,IAAM,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;QACrC,IAAM,KAAK,GAAG;YACZ,CAAC,GAAG,GAAG,MAAM,EAAE,IAAI,GAAG,KAAK,EAAE,CAAC,GAAG,GAAG,IAAI,IAAI,MAAM,EAAE,CAAC,IAAI,GAAG,IAAI,IAAI,KAAK,CAAC;SAC3E,CAAC;QACF,IAAM,UAAU,GAAG,CAAC,CAAC,CAAC,CAAC;QACvB,OAAO,KAAK,CAAC,aAAa,CACtB,GAAG,CAAC,OAAO,EAAE,CAAC,UAAU,EAAE,EAAE,KAAK,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAC;KAC9D,CAAC,CAAC;CACJ;;ACnGD;;;;;;;;;;;;;;;;AAuBA,IAAM,YAAY,GAAG,EAAE,CAAC;AACxB,IAAM,qBAAqB,GAAG,GAAG,CAAC;AAClC,IAAM,uBAAuB,GAAG,GAAG,CAAC;AAEpC,IAAM,eAAe,GAAG,SAAS,CAAC;AAClC,IAAM,iBAAiB,GACnB,CAAC,8BAA8B,EAAE,kCAAkC,CAAC,CAAC;AAqCzE;IACE,8BAAmB,UAAsB,EAAS,UAAoB;QAAnD,eAAU,GAAV,UAAU,CAAY;QAAS,eAAU,GAAV,UAAU,CAAU;KAAI;IAEpE,qCAAM,GAAZ,UAAa,KAAiB,EAAE,OAAgC;;;;;;;wBAE9D,OAAO,GAAGA,iBAAe,CAAC,OAAO,CAAC,CAAC;wBAC7B,GAAG,GAAG,IAAI,CAAC,cAAM,OAAA,KAAI,CAAC,UAAU,CAAC,KAAK,EAAE,OAAO,CAAC,GAAA,CAAC,CAAC;wBAClD,KAAkB,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAA7C,MAAM,QAAA,EAAE,KAAK,QAAA,CAAiC;wBAC/C,QAAQ,GAA6B,EAAE,CAAC;wBAC9C,QAAQ,CAAC,eAAe,CAAC,GAAG,GAAG,CAAC;wBAE5B,qBAAM,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,QAAQ,EAAE,iBAAiB,CAAC,EAAA;;wBAD7D,KACF,SACQ,EAFL,YAAY,QAAA,EAAE,WAAW,QAAA;wBAI1B,KAA2B,YAAY,CAAC,KAAK,EAA1C,QAAQ,QAAA,EAAE,UAAU,QAAA,CAAuB;wBAEhD,qBAAM,OAAO,CAAC,GAAG,CAAC,CAAC,YAAY,CAAC,IAAI,EAAE,EAAE,WAAW,CAAC,IAAI,EAAE,CAAC,CAAC,EAAA;;wBAD1D,KACF,SAA4D,EADzD,MAAM,QAAA,EAAE,KAAK,QAAA;wBAEd,KACF,yBAAyB,CAAC,MAAsB,EAAE,QAAQ,EAAE,UAAU,CAAC,EADpE,SAAS,eAAA,EAAE,SAAS,eAAA,CACiD;wBAGhD,qBAAM,KAAK,CAAC,sBAAsB,CAC1D,WAAuB,EAAE,SAAS,EAAE,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,GAAG,EAC7D,OAAO,CAAC,KAAK,CAAC,EAAA;;wBAFZ,mBAAmB,GAAG,SAEV;wBACI,qBAAM,mBAAmB,CAAC,IAAI,EAAE,EAAA;;wBAAhD,aAAa,GAAG,SAA8C;wBACpE,OAAO,CAAC,CAAC,GAAG,EAAE,YAAY,EAAE,WAAW,EAAE,mBAAmB,CAAC,CAAC,CAAC;wBAEzD,MAAM,GAAG,oBAAoB,CAC/B,KAAK,EAAE,MAAM,EAAE,KAAqB,EAAE,SAAS,EAAE,SAAS,EAC1D,aAAa,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;wBACpC,sBAAO,MAAM,EAAC;;;;KACf;IAEO,yCAAU,GAAlB,UAAmB,KAAiB,EAAE,OAA+B;QACnE,OAAO,aAAa,CAAC,KAAK,CAAC,CAAC,UAAU,EAAE,CAAC,OAAO,EAAE,CAAC;KACpD;IACH,2BAAC;CAAA,IAAA;SAEqB,mBAAmB,CAAC,QAAgB;;;;;wBAGpD,qBAAM,OAAO,CAAC,GAAG,CAAC,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAE,cAAc,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAA;;oBADrE,KACF,SAAuE,EADpE,KAAK,QAAA,EAAE,IAAI,QAAA;oBAElB,sBAAO,IAAI,oBAAoB,CAAC,KAAK,EAAE,IAAI,CAAC,EAAC;;;;CAC9C;AAED,SAASA,iBAAe,CAAC,OAA+B;IACtD,OAAO,GAAG,OAAO,IAAI,EAA4B,CAAC;IAClD,IAAI,OAAO,CAAC,IAAI,IAAI,IAAI,EAAE;QACxB,OAAO,CAAC,IAAI,GAAG,YAAY,CAAC;KAC7B;IACD,IAAI,OAAO,CAAC,GAAG,IAAI,IAAI,EAAE;QACvB,OAAO,CAAC,GAAG,GAAG,qBAAqB,CAAC;KACrC;IACD,IAAI,OAAO,CAAC,KAAK,IAAI,IAAI,EAAE;QACzB,OAAO,CAAC,KAAK,GAAG,uBAAuB,CAAC;KACzC;IACD,OAAO,OAAO,CAAC;CAChB;AAED,SAAS,yBAAyB,CAC9B,MAAoB,EAAE,QAAgB,EACtC,UAAkB;;IAEpB,IAAM,SAAS,GAAa,EAAE,CAAC;;IAE/B,IAAM,SAAS,GAAa,EAAE,CAAC;IAC/B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,EAAE,CAAC,EAAE,EAAE;QACjC,IAAI,QAAQ,GAAG,MAAM,CAAC,SAAS,CAAC;QAChC,IAAI,eAAe,GAAG,CAAC,CAAC,CAAC;QACzB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,EAAE,CAAC,EAAE,EAAE;YACnC,IAAM,SAAS,GAAG,CAAC,GAAG,UAAU,GAAG,CAAC,CAAC;YACrC,IAAM,KAAK,GAAG,MAAM,CAAC,SAAS,CAAC,CAAC;YAChC,IAAI,KAAK,GAAG,QAAQ,EAAE;gBACpB,QAAQ,GAAG,MAAM,CAAC,SAAS,CAAC,CAAC;gBAC7B,eAAe,GAAG,CAAC,CAAC;aACrB;SACF;QACD,SAAS,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC;QACxB,SAAS,CAAC,CAAC,CAAC,GAAG,eAAe,CAAC;KAChC;IACD,OAAO,EAAC,SAAS,WAAA,EAAE,SAAS,WAAA,EAAC,CAAC;CAC/B;AAED,SAAS,oBAAoB,CACzB,KAAa,EAAE,MAAc,EAAE,KAAmB,EAAE,SAAmB,EACvE,SAAmB,EAAE,aAAyB,EAC9C,UAAoB;IACtB,IAAM,OAAO,GAAsB,EAAE,CAAC;;IAEtC,IAAM,YAAY,GAAG,CAAC,CAAC;IACvB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,aAAa,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QAC7C,IAAM,QAAQ,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC;QAC5B,IAAA,6FAC+D,EAD9D,aAAG,EAAE,YAAI,EAAE,cAAM,EAAE,aAC2C,CAAC;QACtE,OAAO,CAAC,IAAI,CAAC;YACX,GAAG,EAAE;gBACH,IAAI,EAAE,IAAI,GAAG,KAAK;gBAClB,GAAG,EAAE,KAAG,GAAG,MAAM;gBACjB,KAAK,EAAE,CAAC,KAAK,GAAG,IAAI,IAAI,KAAK;gBAC7B,MAAM,EAAE,CAAC,MAAM,GAAG,KAAG,IAAI,MAAM;aAChC;YACD,KAAK,EAAE,UAAU,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;YACtC,KAAK,EAAE,SAAS,CAAC,QAAQ,CAAC;SAC3B,CAAC,CAAC;KACJ;IACD,OAAO,OAAO,CAAC;CAChB;;AC5KD;;AAGA,IAAM,OAAO,GAAG,OAAO;;ACHvB;;;;;;;;;;;;;;;GAeG;;;;"}